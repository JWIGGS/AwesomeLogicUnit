module au_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,          // USB->Serial output
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]    // DIP switches on IO Shield

  ) {

  // reset signal
  sig rst;

  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
  }
  
  //---------------------------------------BUTTONS---------------------------------------//
  
  //variables for my button pressed signal
  dff io_button_pressed[5](.clk(clk), .rst(rst));
  dff io_button_ready[5](.clk(clk), .rst(rst));
  var i;

  //constants for buttons
  const BUTTON_UP = 0;
  const BUTTON_DOWN = 2;
  const BUTTON_LEFT = 3;
  const BUTTON_RIGHT = 4;
  const BUTTON_MIDDLE = 1;
  
  //---------------------------------------DISPLAY MANAGER---------------------------------------//
  
  //variables for 7 segment display
  counter io_display_counter(#SIZE(2),#DIV(16), .clk(clk), .rst(rst));
  decoder io_display_decoder(#WIDTH(2));

  display_manager io_display_manager;

  
  //---------------------------------------MODES---------------------------------------//
  
  //we have 4 modes:
  //mode 0: for manual testing to input value of A (in A)
  //mode 1: for manual testing to input value of B (in B)
  //mode 2: for manual testing to display the result (out)
  //mode 3: for automatic testing to iterate through all test cases (auto)
  dff mode[2](.clk(clk), .rst(rst));
  
  
  //store values in dffs for 
  dff store_valueA[16](.clk(clk), .rst(rst));
  dff store_valueB[16](.clk(clk), .rst(rst));
  dff store_alufn[6](.clk(clk), .rst(rst));
  dff store_valueOut[16](.clk(clk), .rst(rst));
  
  
  


  //---------------------------------------TEST CASES---------------------------------------//
  
  //we encode our test cases into three different variables for 
  //every row corresponds to the same test case (eg row 2 of every variable corresponds to the 2nd test case)
  
  //test case inout is to store the 16 bit values of the 2 inputs and the output that the alu will be checked against
  //format: {valueA, valueB, result}
  const TEST_CASE_INOUT = {
    //add
    {16b0000000010101010, 16b0000000011111111, 16b0000000110101001},
    //add overflow
    {16b0100000000000000, 16b0100000000000000, 16b1000000000000000},
    //sub
    {16b0000000010101010, 16b0000000011111111, 16b1111111110101011},
    //sub overflow
    {16b111010100110000, 16b1101100011110000, 16b1001110001000000},
    
    //and
    {16b1010101010101010, 16b1100110011001100, 16b1000100010001000},
    //or
    {16b1010101010101010, 16b1100110011001100, 16b1110111011101110},
    //xor
    {16b1010101010101010, 16b1100110011001100, 16b0110011001100110},
    //ldr ("A")
    {16b1010101010101010, 16b1100110011001100, 16b1010101010101010}
  };
  
  //test case alufn is to store the alufn code provided to the alu
  //format: {alufn}
  const TEST_CASE_ALUFN = {
    {6b000000}, //add
    {6b000000}, //add
    {6b000001}, //sub
    {6b000001}, //sub
    
    {6b011000}, //and
    {6b011110}, //or
    {6b010110}, //xor
    {6b011010} //ldr ("A")
        
  };
  
  //test case zvn is to check the ZVN outputs of the alu against these values.
  //T is a boolean to see if we should even check the ZVN, because in some tests we dont actually care about these values
  //format: {T, Z, V, N}
  const TEST_CASE_TZVN = {
    {1, 0, 0, 0}, //add
    {1, 0, 1, 1}, //add
    {1, 0, 0, 1}, //sub
    {1, 0, 1, 1}, //sub
    //past this point we dont care about zvn
    {0, 0, 0, 0}, //and
    {0, 0, 0, 0}, //or
    {0, 0, 0, 0}, //xor
    {0, 0, 0, 0} //ldr ("A")
    
  };
  
  
  //define here the number of test cases provided above
  const TEST_CASE_AMOUNT = 8;
  
  
  //how long to wait on each test case before going to the next test case
  //somewhere 25 is very fast, 29 is probably the most you want to wait.
  const TEST_CASE_DELAY_TIME = 28;
  
  dff test_case_delay[TEST_CASE_DELAY_TIME](.clk(clk), .rst(rst));
  dff current_test[$clog2(TEST_CASE_AMOUNT)](.clk(clk), .rst(rst));
  
  //create signal variables to 
  sig checkResult, checkT, checkZ, checkV, checkN;
  
  
  
  
  //---------------------------------------ACTUAL ALU MODULE---------------------------------------//
  
  alu_whole function_alu;

  
  
  
  
  
  always {
  

    //---------------------------------------STANDARD ALWAYS STUFF---------------------------------------//
    
    // input raw inverted reset signal
    reset_cond.in = ~rst_n;

    // conditioned reset
    rst = reset_cond.out;

    // loop serial port
    usb_tx = usb_rx;

    // turn everything off
    led = 8h00;
    io_led = 3x{{8h00}};

    
    //---------------------------------------HANDLE DISPLAY MANAGER---------------------------------------//
    
    //our seven segment displays can only be addressed one at a time
    //so in order to assign a value to all of them, we are very quickly looking at each one and giving it a value
    
    
    //the io_display_counter is a 2 bit counter that will iterate through and select values 0, 1, 2 and 3 sequentially
    //we then plug the counter value into a decoder, which will give us a 1000 or 0100 or 0010 or 0001 depending on the value of the counter
    //because the segment display is weird, a 1 means not selected and a 0 means selected, so we invert (~) the output of the decoder
    io_display_decoder.in = io_display_counter.value;
    io_sel = ~io_display_decoder.out;
    
    
    //the display manager determines the value that we want to show provided a few arguments
    //if display toggle is 1, then the values shown are based on the current mode
    //if display toggle is 1, then the values shown are based on the alufn codes 
    io_display_manager.displayToggle = io_button[BUTTON_DOWN];
    io_display_manager.mode = mode.q;
    
    
    //the view ZVN are shown as outputs in the display manager
    io_display_manager.view_zvn = io_button[BUTTON_UP];
    
    //because the segment display is weird, 1 means that the segment is turned off, so we invert (~) the output of the display
    //the segment we are assigning is based on the display counter value such that when a segment is selected, we are writing that value of the segment as well
    io_seg = ~io_display_manager.display_output[io_display_counter.value];
    

    
    //---------------------------------------HANDLE BUTTON PRESSES---------------------------------------//
    
    //handle button presses such that io_button_pressed is set to 1 only at the instant the button is actually pressed
    //this is achieved through a ready stats when the button is not pressed
    //when the button is pressed, it becomes not ready (and cannot be pressed again) and the io_button_pressed is set to true, from which we can read from
    //when reading the io_button_pressed.q value, make sure to set the value to 0
    
    for (i = 0; i < 5; i++){
      if(io_button[i]){
        if(io_button_ready.q[i]){
          io_button_ready.d[i] = 0;
          io_button_pressed.d[i] = 1;
        }

      }
      else{
        io_button_ready.d[i] = 1;
        io_button_pressed.d[i] = 0;
      }
    }


    
    //---------------------------------------HANDLE ALU INPUTS---------------------------------------//
    case(mode.q){
        
      3:
        //auto mode
        
        //in auto mode, the inputs to the alu are driven by the test cases
        //current test is the value of the current test
        function_alu.a = TEST_CASE_INOUT[current_test.q][2];
        function_alu.b = TEST_CASE_INOUT[current_test.q][1];
        function_alu.alufn = TEST_CASE_ALUFN[current_test.q][0];
        
        
        //pass the test case alufn to the display manager
        io_display_manager.alufn = TEST_CASE_ALUFN[current_test.q][0];
        
        //the results from the alu are checked against the expected results from the test cases
        checkResult = (function_alu.result == TEST_CASE_INOUT[current_test.q][0]);
        
        checkT = TEST_CASE_TZVN[current_test.q][3];
        checkZ = function_alu.z == TEST_CASE_TZVN[current_test.q][2];
        checkV = function_alu.v == TEST_CASE_TZVN[current_test.q][1];
        checkN = function_alu.n == TEST_CASE_TZVN[current_test.q][0];
        
        //the results are compiled and sent to the display manager to show PASS or FAIL
        //if check T is true, then the pass check will rely on ZVN checks. if not, then it just relies on the result check.
        io_display_manager.test_pass = (checkT? (checkResult && checkZ && checkV && checkN): (checkResult));
        
        //send the results if ZVN are correct to the display manager
        //so if the Z is correct, it will be shown etc.
        io_display_manager.z = checkZ;
        io_display_manager.v = checkV;
        io_display_manager.n = checkN;
        
        io_display_manager.t = checkT;
      
      default:
        
        //all manual testing modes
        
        
        
        //pass the stored values of A, B, and alufn into the ALU
        function_alu.a = store_valueA.q;
        function_alu.b = store_valueB.q;
        function_alu.alufn = store_alufn.q;
        
        //store the result of the alu into the value out dffs
        store_valueOut.d = function_alu.result;
        
        //pass the alufn to the display manager
        io_display_manager.alufn = store_alufn.q;
        
        //set the test pass to zero, indicating failure
        //it doesnt really matter because the test pass is only used for auto testing, so this i just the default
        io_display_manager.test_pass = 0;
        
        //pass the ZVN values to the display manager so that it can view them
        io_display_manager.z = function_alu.z;
        io_display_manager.v = function_alu.v;
        io_display_manager.n = function_alu.n;
        
        //set the t input to true so that the zvn result is displayed
        io_display_manager.t = 1;
        

    }
    
 
    

    //---------------------------------------HANDLE LED DISPLAY---------------------------------------//
    
    case(mode.q){
      
      
      0:
        //MODE: a in
        //display the current value of A
        io_led[1] = store_valueA.q[7:0];
        io_led[2] = store_valueA.q[15:8];

        //display the current value of alufn
        io_led[0] = store_alufn.q;
      
      
      1:
        //MODE: b in
        //display the current value of B
        io_led[1] = store_valueB.q[7:0];
        io_led[2] = store_valueB.q[15:8];

        //display the current value of alufn
        io_led[0] = store_alufn.q;
      
      
      2:
        //MODE: out
        //display the current value of the output
        io_led[1] = store_valueOut.q[7:0];
        io_led[2] = store_valueOut.q[15:8];

        //display the current value of alufn
        io_led[0] = store_alufn.q;
      
      
      3:
        //MODE: auto
        //display the current test case as binary on the leds
        //the display numbers are reversed so as to make it easier when counting the test case
        io_led[0] = TEST_CASE_AMOUNT - 1 - current_test.q;
        io_led[1] = 8h00;
        io_led[2] = 8h00;
    }
    

    //---------------------------------------HANDLE BUTTON ACTIONS---------------------------------------//

    //right button press goes to next mode
    if(io_button_pressed.q[BUTTON_RIGHT]){
      io_button_pressed.d[BUTTON_RIGHT] = 0;
      mode.d = mode.q+1;
    }

    //left button press goes to previous mode
    if(io_button_pressed.q[BUTTON_LEFT]){
      io_button_pressed.d[BUTTON_LEFT] = 0;
      mode.d = mode.q-1;
    }

    //middle button press save values
    if(io_button_pressed.q[BUTTON_MIDDLE]){
      io_button_pressed.d[BUTTON_MIDDLE] = 0;

      //save value of switches to value A or B
      case (mode.q){
        0:
          //MODE: set A stores the current value of the switches to A
          store_valueA.d = $flatten(io_dip[2:1]);
        1:
          store_valueB.d = $flatten(io_dip[2:1]);
      }

      //save value of switches to alufn
      store_alufn.d = io_dip[0][5:0];
    }
    
    
    
    //---------------------------------------HANDLE AUTOMATIC TEST CASE STATE MACHINE---------------------------------------//
    
    
    //keep incrementing the delay
    test_case_delay.d = test_case_delay.q+1;
    
    //once the highest bit of the delay reaches 1, we reset the delay
    if(test_case_delay.q[TEST_CASE_DELAY_TIME-1]){
      test_case_delay.d = 0;
      
      //if we are at the last test case, move back to the first test case
      //else, keep incrementing through the test cases
      if(current_test.q +1 >= TEST_CASE_AMOUNT){
        current_test.d = 0;
      }
      else{
        current_test.d = current_test.q + 1;
      }
    }
    
    
    







  }
}
