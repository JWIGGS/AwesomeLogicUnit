/*
   This file was generated automatically by Alchitry Labs version 1.2.1.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module au_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input usb_rx,
    output reg usb_tx,
    output reg [23:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input [4:0] io_button,
    input [23:0] io_dip
  );
  
  
  
  reg rst;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  
  reg [4:0] M_io_button_pressed_d, M_io_button_pressed_q = 1'h0;
  
  reg [4:0] M_io_button_ready_d, M_io_button_ready_q = 1'h0;
  
  integer i;
  
  wire [2-1:0] M_io_display_counter_value;
  counter_2 io_display_counter (
    .clk(clk),
    .rst(rst),
    .value(M_io_display_counter_value)
  );
  
  wire [4-1:0] M_io_display_decoder_out;
  reg [2-1:0] M_io_display_decoder_in;
  decoder_3 io_display_decoder (
    .in(M_io_display_decoder_in),
    .out(M_io_display_decoder_out)
  );
  
  wire [28-1:0] M_io_display_manager_display_output;
  reg [1-1:0] M_io_display_manager_displayToggle;
  reg [2-1:0] M_io_display_manager_mode;
  reg [6-1:0] M_io_display_manager_alufn;
  reg [1-1:0] M_io_display_manager_view_zvn;
  reg [1-1:0] M_io_display_manager_t;
  reg [1-1:0] M_io_display_manager_z;
  reg [1-1:0] M_io_display_manager_v;
  reg [1-1:0] M_io_display_manager_n;
  display_manager_4 io_display_manager (
    .displayToggle(M_io_display_manager_displayToggle),
    .mode(M_io_display_manager_mode),
    .alufn(M_io_display_manager_alufn),
    .view_zvn(M_io_display_manager_view_zvn),
    .t(M_io_display_manager_t),
    .z(M_io_display_manager_z),
    .v(M_io_display_manager_v),
    .n(M_io_display_manager_n),
    .display_output(M_io_display_manager_display_output)
  );
  
  reg [1:0] M_mode_d, M_mode_q = 1'h0;
  
  reg [15:0] M_store_valueA_d, M_store_valueA_q = 1'h0;
  
  reg [15:0] M_store_valueB_d, M_store_valueB_q = 1'h0;
  
  reg [5:0] M_store_alufn_d, M_store_alufn_q = 1'h0;
  
  reg [15:0] M_store_valueOut_d, M_store_valueOut_q = 1'h0;
  
  wire [16-1:0] M_test_case_valueA;
  wire [16-1:0] M_test_case_valueB;
  wire [6-1:0] M_test_case_alufn;
  wire [16-1:0] M_test_case_result;
  wire [1-1:0] M_test_case_t;
  wire [1-1:0] M_test_case_z;
  wire [1-1:0] M_test_case_v;
  wire [1-1:0] M_test_case_n;
  wire [6-1:0] M_test_case_current_case;
  reg [1-1:0] M_test_case_test_paused;
  test_manager_5 test_case (
    .clk(clk),
    .rst(rst),
    .test_paused(M_test_case_test_paused),
    .valueA(M_test_case_valueA),
    .valueB(M_test_case_valueB),
    .alufn(M_test_case_alufn),
    .result(M_test_case_result),
    .t(M_test_case_t),
    .z(M_test_case_z),
    .v(M_test_case_v),
    .n(M_test_case_n),
    .current_case(M_test_case_current_case)
  );
  
  reg M_test_case_paused_d, M_test_case_paused_q = 1'h0;
  
  reg checkResult;
  reg checkT;
  reg checkZ;
  reg checkV;
  reg checkN;
  reg testPass;
  
  wire [16-1:0] M_function_alu_result;
  wire [1-1:0] M_function_alu_z;
  wire [1-1:0] M_function_alu_v;
  wire [1-1:0] M_function_alu_n;
  reg [6-1:0] M_function_alu_alufn;
  reg [16-1:0] M_function_alu_a;
  reg [16-1:0] M_function_alu_b;
  alu_whole_6 function_alu (
    .alufn(M_function_alu_alufn),
    .a(M_function_alu_a),
    .b(M_function_alu_b),
    .result(M_function_alu_result),
    .z(M_function_alu_z),
    .v(M_function_alu_v),
    .n(M_function_alu_n)
  );
  
  always @* begin
    M_mode_d = M_mode_q;
    M_store_valueA_d = M_store_valueA_q;
    M_store_valueB_d = M_store_valueB_q;
    M_io_button_ready_d = M_io_button_ready_q;
    M_store_alufn_d = M_store_alufn_q;
    M_io_button_pressed_d = M_io_button_pressed_q;
    M_store_valueOut_d = M_store_valueOut_q;
    M_test_case_paused_d = M_test_case_paused_q;
    
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    usb_tx = usb_rx;
    led = 8'h00;
    io_led = 24'h000000;
    for (i = 1'h0; i < 3'h5; i = i + 1) begin
      if (io_button[(i)*1+0-:1]) begin
        if (M_io_button_ready_q[(i)*1+0-:1]) begin
          M_io_button_ready_d[(i)*1+0-:1] = 1'h0;
          M_io_button_pressed_d[(i)*1+0-:1] = 1'h1;
        end
      end else begin
        M_io_button_ready_d[(i)*1+0-:1] = 1'h1;
        M_io_button_pressed_d[(i)*1+0-:1] = 1'h0;
      end
    end
    if (M_io_button_pressed_q[4+0-:1]) begin
      M_io_button_pressed_d[4+0-:1] = 1'h0;
      M_mode_d = M_mode_q + 1'h1;
    end
    if (M_io_button_pressed_q[3+0-:1]) begin
      M_io_button_pressed_d[3+0-:1] = 1'h0;
      M_mode_d = M_mode_q - 1'h1;
    end
    if (M_io_button_pressed_q[1+0-:1]) begin
      M_io_button_pressed_d[1+0-:1] = 1'h0;
      if (M_mode_q == 2'h3) begin
        M_test_case_paused_d = ~M_test_case_paused_q;
      end else begin
        
        case (M_mode_q)
          1'h0: begin
            M_store_valueA_d = io_dip[8+15-:16];
          end
          1'h1: begin
            M_store_valueB_d = io_dip[8+15-:16];
          end
        endcase
        M_store_alufn_d = io_dip[0+0+5-:6];
      end
    end
    M_test_case_test_paused = M_test_case_paused_q;
    
    case (M_mode_q)
      2'h3: begin
        M_function_alu_a = M_test_case_valueA;
        M_function_alu_b = M_test_case_valueB;
        M_function_alu_alufn = M_test_case_alufn;
        M_io_display_manager_alufn = M_test_case_alufn;
        checkResult = (M_function_alu_result == M_test_case_result);
        checkT = M_test_case_t;
        checkZ = M_function_alu_z == M_test_case_z;
        checkV = M_function_alu_v == M_test_case_v;
        checkN = M_function_alu_n == M_test_case_n;
        testPass = (checkT ? (checkResult && checkZ && checkV && checkN) : (checkResult));
        M_io_display_manager_z = checkZ;
        M_io_display_manager_v = checkV;
        M_io_display_manager_n = checkN;
        M_io_display_manager_t = checkT;
      end
      default: begin
        M_function_alu_a = M_store_valueA_q;
        M_function_alu_b = M_store_valueB_q;
        M_function_alu_alufn = M_store_alufn_q;
        M_store_valueOut_d = M_function_alu_result;
        M_io_display_manager_alufn = M_store_alufn_q;
        testPass = 1'h0;
        M_io_display_manager_z = M_function_alu_z;
        M_io_display_manager_v = M_function_alu_v;
        M_io_display_manager_n = M_function_alu_n;
        M_io_display_manager_t = 1'h1;
      end
    endcase
    
    case (M_mode_q)
      1'h0: begin
        io_led[8+7-:8] = M_store_valueA_q[0+7-:8];
        io_led[16+7-:8] = M_store_valueA_q[8+7-:8];
        io_led[0+7-:8] = M_store_alufn_q;
      end
      1'h1: begin
        io_led[8+7-:8] = M_store_valueB_q[0+7-:8];
        io_led[16+7-:8] = M_store_valueB_q[8+7-:8];
        io_led[0+7-:8] = M_store_alufn_q;
      end
      2'h2: begin
        io_led[8+7-:8] = M_store_valueOut_q[0+7-:8];
        io_led[16+7-:8] = M_store_valueOut_q[8+7-:8];
        io_led[0+7-:8] = M_store_alufn_q;
      end
      2'h3: begin
        io_led[0+7-:8] = 6'h15 - M_test_case_current_case;
        io_led[8+7-:8] = testPass ? 8'hff : 8'h00;
        io_led[16+7-:8] = testPass ? 8'hff : 8'h00;
      end
    endcase
    M_io_display_decoder_in = M_io_display_counter_value;
    io_sel = ~M_io_display_decoder_out;
    M_io_display_manager_displayToggle = io_button[2+0-:1];
    M_io_display_manager_mode = M_mode_q;
    M_io_display_manager_view_zvn = io_button[0+0-:1];
    io_seg = ~M_io_display_manager_display_output[(M_io_display_counter_value)*7+6-:7];
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_store_valueOut_q <= 1'h0;
    end else begin
      M_store_valueOut_q <= M_store_valueOut_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_io_button_ready_q <= 1'h0;
    end else begin
      M_io_button_ready_q <= M_io_button_ready_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_test_case_paused_q <= 1'h0;
    end else begin
      M_test_case_paused_q <= M_test_case_paused_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_io_button_pressed_q <= 1'h0;
    end else begin
      M_io_button_pressed_q <= M_io_button_pressed_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_store_alufn_q <= 1'h0;
    end else begin
      M_store_alufn_q <= M_store_alufn_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_store_valueA_q <= 1'h0;
    end else begin
      M_store_valueA_q <= M_store_valueA_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_mode_q <= 1'h0;
    end else begin
      M_mode_q <= M_mode_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_store_valueB_q <= 1'h0;
    end else begin
      M_store_valueB_q <= M_store_valueB_d;
    end
  end
  
endmodule
